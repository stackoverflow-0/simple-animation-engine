#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Boid {
    vec3 position;
    vec4 rotation;
    vec3 velocity;
};

layout(std140, binding = 0) buffer UniformBuffer {
    Boid boids[];
};

uniform int boid_num;

vec4 rotate_from_to(vec3 a, vec3 b) {
    float dotProduct = dot(a, b);
    vec3 crossProduct = cross(a, b);
    vec4 quaternion = vec4(crossProduct, dotProduct + length(crossProduct));
    return quaternion;
}

void main() {
    int boid_id = int(gl_LocalInvocationIndex);

    const float delta_time = 0.1;

    const float min_distance = 0.3;
    const float visual_range = 0.4;
    const float avoid_factor = 0.05;
    const float center_factor = 0.01;
    const float align_factor = 0.01;
    const vec3 nav_point = vec3(0.0, 0.0, 0.0);

    Boid b = boids[boid_id];

    vec3 old_vec = b.velocity;

    vec3 move = vec3(0.0);
    vec3 center = vec3(0.0);
    vec3 align_vec = vec3(0.0);

    int neighbor_num = 0;

    for (int i = 0; i < boid_num; i++) {
        Boid tb = boids[i];
        float dis = distance(b.position, tb.position);
        if (dis < min_distance) {
            move += b.position - tb.position;
        }
        if (dis < visual_range) {
            center += tb.position;
            align_vec += tb.velocity;
            neighbor_num++;
        }
    }
    if (neighbor_num > 0) {
        center /= float(neighbor_num);
        align_vec /= float(neighbor_num);
        b.velocity += (center - b.position) * center_factor;
        b.velocity += (align_vec - b.velocity) * align_factor;
    }
    b.velocity += move * avoid_factor;
    b.velocity = normalize(b.velocity);

    b.velocity.x += b.position.x < nav_point.x ? 0.01 : -0.01;
    b.velocity.y += b.position.y < nav_point.y ? 0.01 : -0.01;
    b.velocity.z += b.position.z < nav_point.z ? 0.01 : -0.01;

    b.rotation = rotate_from_to(normalize(old_vec), b.velocity) * b.rotation;
    b.position += b.velocity * delta_time;
    boids[boid_id] = b;
}